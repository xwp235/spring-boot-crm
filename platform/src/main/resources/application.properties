server.shutdown=graceful
# 必须配置，防止使用spring-session做session管理时导致相互间session不一致
server.servlet.session.cookie.name=APP-SESSION-ID
server.error.include-exception=true
server.error.include-message=always
server.error.whitelabel.enabled=false
server.error.path=/error
spring.application.name=spring-boot-crm
spring.messages.basename=messages/lang
#  https://docs.spring.io/spring-boot/docs/3.2.0/reference/htmlsingle/#features.spring-application.virtual-threads
spring.threads.virtual.enabled=true
spring.profiles.active=@env@
spring.main.keep-alive=true
spring.jackson.time-zone=UTC
spring.jackson.serialization.write-enums-using-to-string=true
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.default-property-inclusion=always
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSSZ
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=1GB
spring.servlet.multipart.max-request-size=1GB
spring.mvc.log-request-details=true
## 可通过query参数：format或者请求头Key为Accept参数指定返回数据格式为xml,json...等
spring.mvc.contentnegotiation.favor-parameter=true
spring.mvc.async.request-timeout=${ASYNC_REQUEST_TIMEOUT:PT3S}
# spring-boot 2.2版本后要手动开启form的_method对delete和put的处理
spring.mvc.hiddenmethod.filter.enabled=true
spring.mvc.static-path-pattern=/static/**
spring.task.scheduling.pool.size=40
spring.task.scheduling.thread-name-prefix=asyncScheduleTask-
spring.task.scheduling.shutdown.await-termination=true
spring.task.scheduling.shutdown.await-termination-period=PT3M
spring.task.execution.pool.max-size=30
spring.task.execution.pool.core-size=10
spring.task.execution.pool.queue-capacity=80
spring.task.execution.pool.keep-alive=600s
spring.task.execution.thread-name-prefix=asyncTask-
spring.task.execution.shutdown.await-termination=true
spring.task.execution.shutdown.await-termination-period=PT3M
config.default-timezone=${APP_TIMEZONE:UTC}
config.default-datetime-pattern=${APP_DATETIME_PATTERN:yyyy-MM-dd'T'HH:mm:ss.SSSZ}
config.logging.structured=${LOGGING_STRUCTURED:false}
spring.datasource.url=${DB_URL}
spring.datasource.driver-class-name=${DB_DRIVER:org.postgresql.Driver}
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.username=${DB_USERNAME}
spring.datasource.hikari.password=${DB_PASSWORD}
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.read-only=false
spring.datasource.hikari.minimum-idle=${DATASOURCE_MINIMUM_IDLE:2}
spring.datasource.hikari.maximum-pool-size=${DATASOURCE_MAXIMUM_POOL_SIZE:10}
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-test-query=select 1
spring.datasource.hikari.validation-timeout=1500
spring.datasource.hikari.pool-name=${spring.application.name}-HikariCP
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.diskspace.enabled=false
management.health.circuitbreakers.enabled=true
management.health.ratelimiters.enabled=false
management.info.env.enabled=true
management.info.git.enabled=true
management.info.git.mode=full
info.name=${spring.application.name}
info.description=resilience4j demo
info.environment=${spring.profiles.active}
info.version=1.0.0
management.metrics.tags.application=${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls=true
###### 断路器 用于防止系统过载和故障蔓延
## 是否将断路器注册到 Spring Boot Actuator 中
resilience4j.circuitbreaker.configs.default.register-health-indicator=true
## 滑动窗口大小，用于统计失败率
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
## 开始计算失败率前最少调用次数
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls=5
## 在Half-Open状态允许通过的调用次数
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
## 是否自动从Open状态转换为Half-Open状态
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true
## Open状态保持时长
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5s
## 触发断路器的失败率阈值（百分比）
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
## 事件消费者的缓冲区大小（监控用）
resilience4j.circuitbreaker.configs.default.eventConsumerBufferSize=10
## 哪些异常会被计为失败
resilience4j.circuitbreaker.configs.default.recordExceptions[0]=org.springframework.web.client.HttpServerErrorException
resilience4j.circuitbreaker.configs.default.recordExceptions[1]=java.util.concurrent.TimeoutException
resilience4j.circuitbreaker.configs.default.recordExceptions[2]=java.io.IOException
## 哪些异常会被忽略
resilience4j.circuitbreaker.configs.default.ignore-exceptions[0]=com.xwplay.crm.common.resilience4j.exception.BusinessException
resilience4j.circuitbreaker.configs.shared.slidingWindowSize=100
resilience4j.circuitbreaker.configs.shared.permittedNumberOfCallsInHalfOpenState=30
resilience4j.circuitbreaker.configs.shared.waitDurationInOpenState=1s
resilience4j.circuitbreaker.configs.shared.failureRateThreshold=50
resilience4j.circuitbreaker.configs.shared.eventConsumerBufferSize=10
resilience4j.circuitbreaker.configs.shared.ignore-exceptions[0]=com.xwplay.crm.common.resilience4j.exception.BusinessException
###### 断路器使用配置
resilience4j.circuitbreaker.instances.backendA.base-config=default
resilience4j.circuitbreaker.instances.backendB.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.backendB.slidingWindowSize=10
resilience4j.circuitbreaker.instances.backendB.minimumNumberOfCalls=10
resilience4j.circuitbreaker.instances.backendB.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.backendB.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.backendB.failureRateThreshold=50
resilience4j.circuitbreaker.instances.backendB.eventConsumerBufferSize=10
## 自定义失败判断逻辑的类（实现 Predicate 接口）
resilience4j.circuitbreaker.instances.backendB.recordFailurePredicate=com.xwplay.crm.common.resilience4j.exception.RecordFailurePredicate
###### 重试机制 在出现指定异常时自动重试
## 最多尝试次数（包括第一次）
resilience4j.retry.configs.default.maxAttempts=3
## 每次重试之间的等待时间（单位：ms）
resilience4j.retry.configs.default.waitDuration=100
## 哪些异常触发重试
resilience4j.retry.configs.default.retryExceptions[0]=org.springframework.web.client.HttpServerErrorException
resilience4j.retry.configs.default.retry-exceptions[1]=java.util.concurrent.TimeoutException
resilience4j.retry.configs.default.retry-exceptions[2]=java.io.IOException
## 哪些异常忽略，不重试
resilience4j.retry.configs.default.ignoreExceptions[0]=com.xwplay.crm.common.resilience4j.exception.BusinessException
resilience4j.retry.instances.backendA.base-config=default
resilience4j.retry.instances.backendB.base-config=default
###### 信号量隔离 控制并发量，防止某一服务资源耗尽
## 允许的最大并发调用数
resilience4j.bulkhead.configs.default.maxConcurrentCalls=100
resilience4j.bulkhead.instances.backendA.maxConcurrentCalls=10
## 等待获取许可的最大时间（用于阻塞型 Bulkhead）
resilience4j.bulkhead.instances.backendB.maxWaitDuration=10ms
resilience4j.bulkhead.instances.backendB.maxConcurrentCalls=20
###### 线程池隔离 类似于 Hystrix 的线程池隔离，用于异步执行。
## 最大线程数
resilience4j.thread-pool-bulkhead.configs.default.maxThreadPoolSize=4
## 线程池的核心线程数
resilience4j.thread-pool-bulkhead.configs.default.coreThreadPoolSize=2
## 队列容量（排队请求数）
resilience4j.thread-pool-bulkhead.configs.default.queueCapacity=2
resilience4j.thread-pool-bulkhead.instances.backendA.baseConfig=default
resilience4j.thread-pool-bulkhead.instances.backendB.maxThreadPoolSize=1
resilience4j.thread-pool-bulkhead.instances.backendB.coreThreadPoolSize=1
resilience4j.thread-pool-bulkhead.instances.backendB.queueCapacity=1
###### 限流器 控制单位时间内允许的请求数，避免系统被打爆
## 是否暴露限流状态到 actuator
resilience4j.ratelimiter.configs.default.registerHealthIndicator=false
## 每个刷新周期允许的请求数量
resilience4j.ratelimiter.configs.default.limitForPeriod=10
## 刷新周期，比如 1s 就是每秒重置
resilience4j.ratelimiter.configs.default.limitRefreshPeriod=1s
## 获取许可的最长等待时间
resilience4j.ratelimiter.configs.default.timeoutDuration=0
## 限流事件缓冲区大小
resilience4j.ratelimiter.configs.default.eventConsumerBufferSize=100
resilience4j.ratelimiter.instances.backendA.base-config=default
resilience4j.ratelimiter.instances.backendB.limitForPeriod=1
resilience4j.ratelimiter.instances.backendB.limitRefreshPeriod=3m
resilience4j.ratelimiter.instances.backendB.timeoutDuration=3s
###### 超时控制 控制某个方法执行的最长时间，通常用于Future或异步方法。
## 是否在超时时中断任务（cancel Future）
resilience4j.timelimiter.configs.default.cancelRunningFuture=false
## 超时时间
resilience4j.timelimiter.configs.default.timeoutDuration=2s
resilience4j.timelimiter.instances.backendA.base-config=default
resilience4j.timelimiter.instances.backendB.base-config=default
